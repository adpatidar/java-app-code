pipeline {
    agent { label ' ag '}
    environment {
       VERSION = "${env.BUILD_ID}"
        DOCKER_HOSTED_EP = "54.160.82.152:8083" 
        SONAR = "http://54.144.83.44:9000"
        
        Image_Name = "$DOCKER_HOSTED_EP/java-app:${VERSION}"

    }

    stages{
        stage('Code Checkout'){
            
            steps{
                   
                 git branch: 'main', url: 'https://github.com/adpatidar/java-app-code.git'
            }
        }
        
        stage('Static Code Analysis') {
           environment {
           SONAR_URL = "$SONAR"
                       }
      steps {
          script {
         withCredentials([string(credentialsId: 'token', variable: 'SONAR_AUTH_TOKEN')]) {
         
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                                                                                            }
                 }
         
            }
       }
    
        
        stage('Build and Test') {
           steps {
        
            sh 'cd spring-boot-app && mvn clean package'
                 }
              }
              
        stage("Build docker image"){
            steps{
                script{
                       sh '''
                        cd spring-boot-app
                        docker build -t $Image_Name .
                        '''
                    }
                }
            }
       
        stage("Scan docker image with Trivy") {
           steps {
               script {
                sh ('docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image $DOCKER_HOSTED_EP/java-app:$VERSION --no-progress --scanners vuln  --exit-code 0 --severity HIGH,CRITICAL --format table')
               }
           }
        }
        stage("Push image to Nexus"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'nexus-cred', variable: 'nexus_pass_var')]) {
                        sh '''
                        docker login -u admin -p $nexus_pass_var $DOCKER_HOSTED_EP
                        docker push $Image_Name
                        docker rmi $Image_Name
                        '''
                    }
                }
            }
        }

        stage("Deployment Approval"){
            steps{
                script{
                    timeout(10){
                        
                        mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> Please go to console output of : ${env.BUILD_URL} to approve or Reject the deployment.", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "CICD APPROVAL REQUEST: Project name -> ${env.JOB_NAME}", to: "gajanansbarure1994@gmail.com";  
                        input(id: "DeployGate", message: "Approval required to proceed, deploy ${env.JOB_NAME}?", ok: 'Deploy')
                       }   
                }
            }
        }  
        stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "java-app-code"
            GIT_USER_NAME = "adpatidar"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "test@gmail.com"
                    git config user.name "adpatidar "
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s+java-app:.*+java-app:${BUILD_NUMBER}+" spring-boot-app-manifests/deployment.yml
                    git add spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
                }
           }
        }
    
 
   }
   
   post {
      always {
         echo "Done"
         
          mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br>Build URL: ${env.BUILD_URL} <br> Status: ${currentBuild.result} ", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CICD: Project name -> ${env.JOB_NAME}", to: "gajanansbarure1994@gmail.com";
        
        }
    } 
}
